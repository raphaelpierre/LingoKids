import React, { useState, useEffect } from 'react';
import { Word } from '../../types';
import { useAuthStore } from '../../stores/authStore';
import { useProgressStore } from '../../stores/progressStore';

interface WordScrambleGameProps {
  words: Word[];
  onComplete?: (score: number) => void;
}

export function WordScrambleGame({ words, onComplete }: WordScrambleGameProps) {
  const [currentWordIndex, setCurrentWordIndex] = useState(0);
  const [scrambledWord, setScrambledWord] = useState('');
  const [userGuess, setUserGuess] = useState('');
  const [score, setScore] = useState(0);
  const [attempts, setAttempts] = useState(0);
  const [gameOver, setGameOver] = useState(false);

  const { user } = useAuthStore();
  const { updatePoints, addGameScore } = useProgressStore();

  // Scramble a word
  const scrambleWord = (word: string): string => {
    const wordArray = word.split('');
    for (let i = wordArray.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [wordArray[i], wordArray[j]] = [wordArray[j], wordArray[i]];
    }
    return wordArray.join('');
  };

  // Initialize game
  useEffect(() => {
    if (words.length > 0) {
      const word = words[currentWordIndex].english;
      setScrambledWord(scrambleWord(word));
    }
  }, [currentWordIndex, words]);

  // Handle user guess
  const handleGuess = () => {
    setAttempts(prev => prev + 1);
    const currentWord = words[currentWordIndex].english;

    if (userGuess.toLowerCase().trim() === currentWord.toLowerCase()) {
      // Correct guess
      setScore(prev => prev + 10);

      // Move to next word or end game
      if (currentWordIndex < words.length - 1) {
        setCurrentWordIndex(prev => prev + 1);
      } else {
        endGame();
      }
    } else {
      // Incorrect guess
      setScore(prev => Math.max(0, prev - 2));
    }

    // Reset guess
    setUserGuess('');
  };

  // End game logic
  const endGame = () => {
    setGameOver(true);
    const finalScore = calculateFinalScore();
    onComplete?.(finalScore);
  };

  // Calculate and save final score
  const calculateFinalScore = () => {
    if (!user) return 0;

    const baseScore = words.length * 10;
    const attemptPenalty = attempts * 1;
    const finalScore = Math.max(baseScore - attemptPenalty, 0);

    try {
      // Update user points
      updatePoints(user.uid, finalScore);

      // Log game score
      addGameScore(user.uid, {
        gameId: 'word_scramble_game',
        score: finalScore,
        date: new Date().toISOString()
      });

      console.log(`üèÜ Word Scramble Game Score: ${finalScore}`);
      return finalScore;
    } catch (error) {
      console.error('Failed to save game score', error);
      return 0;
    }
  };

  // Render game
  if (gameOver) {
    return (
      <div className="game-over flex flex-col items-center justify-center min-h-[400px] text-center">
        <h2 className="text-3xl font-bold text-emerald-700 mb-4">Game Completed!</h2>
        <div className="bg-emerald-100 p-6 rounded-lg shadow-md">
          <p className="text-xl mb-2">Your Final Score: <span className="font-bold text-emerald-800">{score}</span></p>
          <p className="text-gray-600 mb-4">Total Points Earned: {calculateFinalScore()}</p>
          <div className="flex justify-center space-x-4 mt-6">
            <button 
              onClick={() => onComplete?.(score)} 
              className="px-6 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition"
            >
              Continue
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="word-scramble-game">
      <h2>Unscramble the Word</h2>
      <div className="scrambled-word">
        {scrambledWord}
      </div>
      <input 
        type="text" 
        value={userGuess}
        onChange={(e) => setUserGuess(e.target.value)}
        placeholder="Type the correct word"
        className="guess-input"
      />
      <button 
        onClick={handleGuess}
        className="submit-guess"
      >
        Submit Guess
      </button>
      <div className="game-stats">
        <p>Score: {score}</p>
        <p>Word {currentWordIndex + 1} of {words.length}</p>
      </div>
    </div>
  );
}